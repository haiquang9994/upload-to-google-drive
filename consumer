#!/usr/bin/env php
<?php

require_once __DIR__ . '/load.php';

set_time_limit(0);

use App\Lib\Google\Drive\DefaultClient;
use RedisQueue\Client as RedisQueueClient;
use RedisQueue\Message;
use RedisQueue\Worker;

function prepare_m3u8($m3u8_path, $key_path, $path)
{
    $m3u8_path = realpath($m3u8_path);
    $key_path = realpath($key_path);
    $m3u8_content = file_get_contents($m3u8_path);
    $ts_dir = dirname($m3u8_path);
    preg_match('/URI="([^)]+)"/', $m3u8_content, $key_check);
    if ($key_check) {
        $m3u8_content = str_replace($key_check[0], "URI=\"$key_path\"", $m3u8_content);
    }
    $m3u8_content = preg_replace("/(\d+.ts)/", "$ts_dir/$1", $m3u8_content);
    file_put_contents($path, $m3u8_content);
}

function prepare_video($video_path, $tmp_dir = null)
{
    if (!$tmp_dir) {
        $tmp_dir = sys_get_temp_dir();
    }

    $name = basename($video_path);

    $audio_dir = $video_path . '/audio';
    $has_audio = is_readable($audio_dir . '/.m3u8');
    $v1080_dir = $video_path . '/1080';

    $audio_tmp_output_path = $tmp_dir . '/audio.mp3';
    $video_tmp_output_path = $tmp_dir . '/video.mp4';
    $full_video_tmp_output_path = $tmp_dir . '/full_video.mp4';

    @unlink($audio_tmp_output_path);
    @unlink($video_tmp_output_path);
    @unlink($full_video_tmp_output_path);

    $video_m3u8_path = $name . '.1080.m3u8';
    prepare_m3u8($v1080_dir . '/.m3u8', $video_path . '/key', $video_m3u8_path);
    exec("ffmpeg -allowed_extensions ALL -i $video_m3u8_path -codec copy $video_tmp_output_path");
    @unlink($video_m3u8_path);

    if ($has_audio) {
        $audio_m3u8_path = $name . '.mp3.m3u8';
        prepare_m3u8($audio_dir . '/.m3u8', $video_path . '/key', $audio_m3u8_path);
        exec("ffmpeg -allowed_extensions ALL -i $audio_m3u8_path $audio_tmp_output_path");
        @unlink($audio_m3u8_path);

        exec("ffmpeg -i $video_tmp_output_path -i $audio_tmp_output_path -c:v copy -c:a aac $full_video_tmp_output_path");
        @unlink($video_tmp_output_path);
        @unlink($audio_tmp_output_path);

        return $full_video_tmp_output_path;
    }

    return $video_tmp_output_path;
}

class WorkerBackup extends Worker
{
    public function do(Message $message)
    {
        $cmd = $message->cmd;
        print("--------\n");
        print("CMD: $cmd\n");
        if ($cmd === 'upload') {
            $this->upload($message);
        } elseif ($cmd === 'upload_video') {
            $this->upload_video($message);
        }
        print("--------\n");
    }

    protected function upload($message)
    {
        $lock_file = ROOT_PATH . '/upload.lock';
        touch($lock_file);
        $data = get_data();
        $item = null;
        foreach ($data as $path => $status) {
            if (!$status) {
                $item = $path;
                break;
            }
        }
        if (!$item) {
            @unlink($lock_file);
            return;
        }
        console_log("Zip...");
        $root_path = realpath($item);
        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($root_path),
            RecursiveIteratorIterator::LEAVES_ONLY
        );
        $name = basename($item);
        $zip_path = ROOT_PATH . "/$name.zip";
        try {
            $zip = new ZipArchive();
            $zip->open($zip_path, ZipArchive::CREATE | ZipArchive::OVERWRITE);
            foreach ($files as $file) {
                // Skip directories (they would be added automatically)
                if (!$file->isDir()) {
                    // Get real and relative path for current file
                    $filePath = $file->getRealPath();
                    $relativePath = substr($filePath, strlen($root_path) + 1);

                    // Add current file to archive
                    $zip->addFile($filePath, $relativePath);
                }
            }
            $zip->close();
            console_log("Zip completed.");
            $defaultClient = new DefaultClient("BACKUP_ZIPS", ROOT_PATH . '/google_credentials.json', ROOT_PATH . '/token.json');
            console_log("Upload file...");
            $defaultClient->uploadFile($zip_path, "$name.zip", 'application/zip');
            console_log("Upload completed.");
            $data = get_data();
            $data[$item] = true;
            file_put_contents(ROOT_PATH . '/data.json', json_encode($data));
        } catch (Exception $e) {
            console_log("ERROR: " . $e->getMessage());
        }
        @unlink($lock_file);
        @unlink($zip_path);
    }

    protected function upload_video($message)
    {
        $lock_file = ROOT_PATH . '/upload.lock';
        touch($lock_file);
        $data = get_video();
        $item = null;
        foreach ($data as $path => $status) {
            if (!$status) {
                $item = $path;
                break;
            }
        }
        if (!$item) {
            @unlink($lock_file);
            return;
        }
        console_log("Create MP4...");
        $root_path = realpath($item);
        try {
            $video_path = prepare_video($root_path, ROOT_PATH . '/tmp');
            console_log("MP4 completed.");
            $defaultClient = new DefaultClient("BACKUP_VIDEOS", ROOT_PATH . '/google_credentials.json', ROOT_PATH . '/token.json');
            console_log("Upload file...");
            $video = basename($root_path);
            $defaultClient->uploadFile($video_path, "$video.mp4", 'video/mp4');
            console_log("Upload completed.");
            $data = get_video();
            $data[$item] = true;
            file_put_contents(ROOT_PATH . '/video.json', json_encode($data));
            @unlink($video_path);
        } catch (Exception $e) {
            console_log("ERROR: " . $e->getMessage());
        }
        @unlink($lock_file);
    }
}

try {
    $lock_file = ROOT_PATH . '/upload.lock';
    @unlink($lock_file);
    $client = new RedisQueueClient();
    $client->loop('backup_video_queue', new WorkerBackup());
} catch (Exception $e) {
    print($e->getMessage() . "\n");
}
